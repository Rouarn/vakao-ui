import{_ as o,c as l,o as t,am as a}from"./chunks/framework.CJ-qkA9M.js";const h=JSON.parse('{"title":"更新日志","description":"","frontmatter":{},"headers":[],"relativePath":"guide/changelog.md","filePath":"guide/changelog.md"}'),i={name:"guide/changelog.md"};function r(n,e,d,s,c,u){return t(),l("div",null,e[0]||(e[0]=[a('<h1 id="更新日志" tabindex="-1">更新日志 <a class="header-anchor" href="#更新日志" aria-label="Permalink to &quot;更新日志&quot;">​</a></h1><h2 id="v0-0-3-最新" tabindex="-1">v0.0.3 (最新) <a class="header-anchor" href="#v0-0-3-最新" aria-label="Permalink to &quot;v0.0.3 (最新)&quot;">​</a></h2><h3 id="🔧-重构优化" tabindex="-1">🔧 重构优化 <a class="header-anchor" href="#🔧-重构优化" aria-label="Permalink to &quot;🔧 重构优化&quot;">​</a></h3><ul><li><strong>Hook 函数重构</strong>: 将所有 Hook 函数的第一个返回值改为只读的 <code>ComputedRef</code>，提升数据封装性和类型安全性 <ul><li><code>useToggle</code>: 状态值从 <code>Ref&lt;boolean&gt;</code> 改为 <code>ComputedRef&lt;boolean&gt;</code></li><li><code>useCounter</code>: 计数值从 <code>Ref&lt;number&gt;</code> 改为 <code>ComputedRef&lt;number&gt;</code></li><li><code>useDebounce</code>: 防抖值从 <code>Ref&lt;T&gt;</code> 改为 <code>ComputedRef&lt;T&gt;</code></li><li><code>useThrottle</code>: 节流值从 <code>Ref&lt;T&gt;</code> 改为 <code>ComputedRef&lt;T&gt;</code></li><li><code>useFetch</code>: 数据值从 <code>Ref&lt;T | null&gt;</code> 改为 <code>ComputedRef&lt;T | null&gt;</code></li><li><code>useLocalStorage</code>: 存储值从 <code>Ref&lt;T&gt;</code> 改为 <code>ComputedRef&lt;T&gt;</code></li></ul></li></ul><h3 id="📚-文档更新" tabindex="-1">📚 文档更新 <a class="header-anchor" href="#📚-文档更新" aria-label="Permalink to &quot;📚 文档更新&quot;">​</a></h3><ul><li><strong>API 文档</strong>: 更新了所有 Hook 函数的类型定义和返回值说明</li><li><strong>示例代码</strong>: 修正了文档中 Hook 函数的解构语法，统一使用数组解构</li><li><strong>类型安全</strong>: 完善了 TypeScript 类型定义，明确标注只读属性</li></ul><h3 id="✨-设计改进" tabindex="-1">✨ 设计改进 <a class="header-anchor" href="#✨-设计改进" aria-label="Permalink to &quot;✨ 设计改进&quot;">​</a></h3><ul><li><strong>数据保护</strong>: 防止意外修改 Hook 返回的状态值，提升代码健壮性</li><li><strong>API 一致性</strong>: 统一了所有 Hook 函数的返回值设计模式</li><li><strong>开发体验</strong>: 提供更好的类型提示和错误预防</li></ul><hr><h2 id="v0-0-2" tabindex="-1">v0.0.2 <a class="header-anchor" href="#v0-0-2" aria-label="Permalink to &quot;v0.0.2&quot;">​</a></h2><h3 id="🐛-bug-修复" tabindex="-1">🐛 Bug 修复 <a class="header-anchor" href="#🐛-bug-修复" aria-label="Permalink to &quot;🐛 Bug 修复&quot;">​</a></h3><ul><li><strong>导入路径</strong>: 统一修复了文档中所有 <code>@vakao-ui/components</code> 导入路径为 <code>vakao-ui</code></li><li><strong>样式路径</strong>: 统一样式导入路径为 <code>vakao-ui/style.css</code>，移除了 <code>dist/</code> 前缀</li><li><strong>组件命名</strong>: 修复了文档中 <code>VKButton</code> 类型错误，统一为 <code>VkButton</code></li></ul><h3 id="📚-文档优化" tabindex="-1">📚 文档优化 <a class="header-anchor" href="#📚-文档优化" aria-label="Permalink to &quot;📚 文档优化&quot;">​</a></h3><ul><li><strong>内容整合</strong>: 将首页和快速开始文档的重复内容进行整合，避免冗余</li><li><strong>规范统一</strong>: 明确组件标签使用规范，支持 PascalCase 和 kebab-case，不支持全大写格式</li><li><strong>路径一致</strong>: 确保所有示例代码使用用户实际安装后的导入路径</li><li><strong>TypeScript 支持</strong>: 完善了 TypeScript 配置说明和类型推断示例</li></ul><h3 id="🔧-技术改进" tabindex="-1">🔧 技术改进 <a class="header-anchor" href="#🔧-技术改进" aria-label="Permalink to &quot;🔧 技术改进&quot;">​</a></h3><ul><li><strong>文档结构</strong>: 优化了文档层次结构，提供更清晰的用户指引</li><li><strong>示例代码</strong>: 所有示例代码现在都能在用户环境中直接运行</li><li><strong>开发体验</strong>: 改进了文档的可读性和实用性</li></ul><hr><h2 id="v0-0-1" tabindex="-1">v0.0.1 <a class="header-anchor" href="#v0-0-1" aria-label="Permalink to &quot;v0.0.1&quot;">​</a></h2><h3 id="🐛-bug-修复-1" tabindex="-1">🐛 Bug 修复 <a class="header-anchor" href="#🐛-bug-修复-1" aria-label="Permalink to &quot;🐛 Bug 修复&quot;">​</a></h3><ul><li><strong>样式导入</strong>: 修复了 <code>vakao-ui/dist/style.css</code> 样式文件导入路径问题</li><li><strong>组件属性</strong>: 解决了 Vue 组件属性继承警告问题</li><li><strong>类型安全</strong>: 修复了 TypeScript 类型不兼容错误，特别是 <code>style</code> 属性类型问题</li></ul><h3 id="✨-新特性" tabindex="-1">✨ 新特性 <a class="header-anchor" href="#✨-新特性" aria-label="Permalink to &quot;✨ 新特性&quot;">​</a></h3><ul><li><strong>属性继承</strong>: 组件现在正确支持 <code>class</code>、<code>style</code> 等标准 HTML 属性继承</li><li><strong>类型安全</strong>: 增强了 TypeScript 类型定义，提供更好的开发体验</li><li><strong>自动导入</strong>: 添加了 <code>unplugin-vue-components</code> 自动导入插件支持</li></ul><h3 id="📚-文档更新-1" tabindex="-1">📚 文档更新 <a class="header-anchor" href="#📚-文档更新-1" aria-label="Permalink to &quot;📚 文档更新&quot;">​</a></h3><ul><li>更新了安装和使用指南</li><li>添加了自定义样式和属性继承的示例</li><li>修正了所有文档中的样式文件导入路径</li><li>增加了类型安全使用说明</li></ul><h3 id="🔧-技术改进-1" tabindex="-1">🔧 技术改进 <a class="header-anchor" href="#🔧-技术改进-1" aria-label="Permalink to &quot;🔧 技术改进&quot;">​</a></h3><ul><li>优化了组件的属性处理逻辑</li><li>改进了样式合并机制</li><li>增强了构建配置和导出设置</li></ul><hr><h2 id="v0-0-0" tabindex="-1">v0.0.0 <a class="header-anchor" href="#v0-0-0" aria-label="Permalink to &quot;v0.0.0&quot;">​</a></h2><h3 id="🎉-首次发布" tabindex="-1">🎉 首次发布 <a class="header-anchor" href="#🎉-首次发布" aria-label="Permalink to &quot;🎉 首次发布&quot;">​</a></h3><ul><li><strong>基础组件</strong>: 发布 VKButton 组件</li><li><strong>TypeScript</strong>: 完整的 TypeScript 支持</li><li><strong>Vue 3</strong>: 基于 Vue 3 Composition API</li><li><strong>构建工具</strong>: 使用 Vite 构建</li><li><strong>文档</strong>: 完整的组件文档和使用指南</li></ul>',30)]))}const b=o(i,[["render",r]]);export{h as __pageData,b as default};
