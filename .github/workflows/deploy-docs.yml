name: Deploy Docs to GitHub Pages

# 自动部署文档到 GitHub Pages
# 支持智能通知功能（本地开发时可配置桌面通知）

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

# 设置 GITHUB_TOKEN 的权限，以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许一个并发部署，跳过正在运行和最新队列之间的运行队列
# 但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成
concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  # 构建工作
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 如果未启用 lastUpdated，则不需要

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Install dependencies
        run: |
          # 尝试使用 frozen-lockfile，如果失败则使用 no-frozen-lockfile
          pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: Build with VitePress
        run: |
          pnpm run build:docs
          echo "📚 文档构建完成"
          echo "🚀 准备部署到 GitHub Pages"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/.vitepress/dist

  # 部署工作
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Deployment Success
        if: success()
        run: |
          echo "✅ 部署成功！"
          echo "📖 文档地址: ${{ steps.deployment.outputs.page_url }}"
          echo "💡 本地开发时可使用 'npm run test:notification' 测试桌面通知功能"
